{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\parij\\\\reactfirst\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport power from './power.jpg';\nimport king from './king.jpg';\nimport monster from './monster.jpg';\nimport './App.css';\nimport { useEffect, useRef, useState } from 'react';\nimport { Annotorious } from '@recogito/annotorious';\nimport '@recogito/annotorious/dist/annotorious.min.css';\nimport { saveAs } from 'file-saver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Ref to the image DOM element\n  const imgE = useRef();\n\n  // The current Annotorious instance\n  const [anno, setAnno] = useState();\n\n  // Current drawing tool name\n  const [tool, setTool] = useState('rect');\n\n  // Current Annotations\n  const [strannos, setStrannos] = useState('no annotations yet');\n  var annotations;\n\n  // Init Annotorious when the component\n  // mounts, and keep the current 'anno'\n  // instance in the application state\n  useEffect(() => {\n    let annotorious = null;\n    if (imgE.current) {\n      // Init\n      annotorious = new Annotorious({\n        image: imgE.current\n      });\n\n      //annotations = annotorious.getAnnotations();\n      //stranno = annotations;\n\n      // Attach event handlers here\n      annotorious.on('createAnnotation', annotation => {\n        console.log('created', annotation);\n        //console.log('annotations', annotations);\n      });\n\n      annotorious.on('updateAnnotation', (annotation, previous) => {\n        console.log('updated', annotation, previous);\n      });\n      annotorious.on('deleteAnnotation', annotation => {\n        console.log('deleted', annotation);\n      });\n    }\n\n    // Keep current Annotorious instance in state\n    setAnno(annotorious);\n\n    // Cleanup: destroy current instance\n    return () => annotorious.destroy();\n  }, []);\n\n  // Toggles current tool + button label\n  const toggleTool = () => {\n    if (tool === 'rect') {\n      setTool('polygon');\n      anno.setDrawingTool('polygon');\n    } else {\n      setTool('rect');\n      anno.setDrawingTool('rect');\n    }\n  };\n  const showAnno = () => {\n    //const annotations = annotorious.getAnnotations();\n    // stranno = annotations.body[0].value\n    annotations = anno.getAnnotations();\n    console.log('Existing Annotations:', annotations);\n    var temp = \"\";\n    if (annotations.length > 0) {\n      for (let i = 0; i < annotations.length; i++) {\n        temp = temp + annotations[i].body[0].value;\n        if (i != annotations.length - 1) {\n          temp = temp + \", \";\n        }\n      }\n      setStrannos(temp);\n    }\n    //stranno = annotations[0].body[0].value\n  };\n\n  var timestamp = new Date().getTime();\n  var image = document.getElementById(\"img\");\n  //var imgE = imgE;\n\n  const image1 = () => {\n    image.src = power;\n  };\n  const image2 = () => {\n    image.src = king;\n    //imgE = imgE2;\n  };\n\n  const image3 = () => {\n    image.src = monster;\n  };\n  const fs = require('fs');\n  function saveAnnotationsToFile(annotations) {\n    const filePath = 'annotations.json'; // Path to your existing JSON file\n\n    // Read the existing JSON file\n    fs.readFile(filePath, 'utf8', (err, data) => {\n      if (err) {\n        console.error('Error reading file:', err);\n        return;\n      }\n\n      // Parse the existing JSON data\n      let existingAnnotations = JSON.parse(data);\n\n      // Merge the new annotations with the existing ones\n      existingAnnotations = [...existingAnnotations, ...annotations];\n\n      // Write the updated annotations back to the file\n      fs.writeFile(filePath, JSON.stringify(existingAnnotations, null, 2), 'utf8', err => {\n        if (err) {\n          console.error('Error writing file:', err);\n          return;\n        }\n        console.log('Annotations saved to file.');\n      });\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleTool,\n        children: tool === 'rect' ? 'RECTANGLE' : 'POLYGON'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: showAnno,\n        children: \"Show Annotations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: image1,\n        children: \"image1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: image2,\n        children: \"image2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: image3,\n        children: \"image3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveAnnotationsToFile,\n        children: \"Save Annotations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: strannos\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      id: \"img\",\n      ref: imgE,\n      src: power,\n      alt: \"power\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"2JAu8HsEVrdpbeMI63aoWPVE0sI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["power","king","monster","useEffect","useRef","useState","Annotorious","saveAs","jsxDEV","_jsxDEV","App","_s","imgE","anno","setAnno","tool","setTool","strannos","setStrannos","annotations","annotorious","current","image","on","annotation","console","log","previous","destroy","toggleTool","setDrawingTool","showAnno","getAnnotations","temp","length","i","body","value","timestamp","Date","getTime","document","getElementById","image1","src","image2","image3","fs","require","saveAnnotationsToFile","filePath","readFile","err","data","error","existingAnnotations","JSON","parse","writeFile","stringify","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","id","ref","alt","_c","$RefreshReg$"],"sources":["C:/Users/parij/reactfirst/src/App.js"],"sourcesContent":["import power from './power.jpg';\nimport king from './king.jpg';\nimport monster from './monster.jpg';\nimport './App.css';\nimport { useEffect, useRef, useState } from 'react';\nimport { Annotorious } from '@recogito/annotorious';\nimport '@recogito/annotorious/dist/annotorious.min.css';\nimport { saveAs } from 'file-saver';\n\n\nfunction App() {\n\n  // Ref to the image DOM element\n  const imgE = useRef();\n\n  // The current Annotorious instance\n  const [ anno, setAnno ] = useState();\n\n  // Current drawing tool name\n  const [ tool, setTool ] = useState('rect');\n\n  // Current Annotations\n  const [ strannos, setStrannos ] = useState('no annotations yet');\n  var annotations;\n\n  // Init Annotorious when the component\n  // mounts, and keep the current 'anno'\n  // instance in the application state\n  useEffect(() => {\n    let annotorious = null;\n\n    if (imgE.current) {\n      // Init\n      annotorious = new Annotorious({\n        image: imgE.current,\n      });\n      \n      //annotations = annotorious.getAnnotations();\n      //stranno = annotations;\n      \n      // Attach event handlers here\n      annotorious.on('createAnnotation', annotation => {\n        console.log('created', annotation);\n        //console.log('annotations', annotations);\n      });\n\n      annotorious.on('updateAnnotation', (annotation, previous) => {\n        console.log('updated', annotation, previous);\n      });\n\n      annotorious.on('deleteAnnotation', annotation => {\n        console.log('deleted', annotation);\n      });\n\n\n    }\n\n\n    // Keep current Annotorious instance in state\n    setAnno(annotorious);\n    \n    \n    // Cleanup: destroy current instance\n    return () => annotorious.destroy();\n  }, []);\n\n\n  // Toggles current tool + button label\n  const toggleTool = () => {\n    if (tool === 'rect') {\n      setTool('polygon');\n      anno.setDrawingTool('polygon');\n    } else {\n      setTool('rect');\n      anno.setDrawingTool('rect');\n    }\n  }\n  \n\n  const showAnno = () => {\n    //const annotations = annotorious.getAnnotations();\n    // stranno = annotations.body[0].value\n    annotations = anno.getAnnotations();\n    console.log('Existing Annotations:', annotations);\n    var temp = \"\";\n    if(annotations.length > 0){\n      for(let i = 0; i < annotations.length; i++){\n        temp = temp + annotations[i].body[0].value\n        if(i != annotations.length-1){\n            temp = temp + \", \"\n        }\n      }\n        setStrannos(temp);\n    }\n    //stranno = annotations[0].body[0].value\n  }\n\n  var timestamp = new Date().getTime();\n  var image =document.getElementById(\"img\");\n  //var imgE = imgE;\n  \n  const image1 = () => {\n    image.src = power\n  }\n  const image2 = () => {\n    image.src = king\n    //imgE = imgE2;\n  }\n  const image3 = () => {\n    image.src = monster \n  }\n\n  const fs = require('fs');\n\n  function saveAnnotationsToFile(annotations) {\n    const filePath = 'annotations.json'; // Path to your existing JSON file\n  \n    // Read the existing JSON file\n    fs.readFile(filePath, 'utf8', (err, data) => {\n      if (err) {\n        console.error('Error reading file:', err);\n        return;\n      }\n  \n      // Parse the existing JSON data\n      let existingAnnotations = JSON.parse(data);\n  \n      // Merge the new annotations with the existing ones\n      existingAnnotations = [...existingAnnotations, ...annotations];\n  \n      // Write the updated annotations back to the file\n      fs.writeFile(filePath, JSON.stringify(existingAnnotations, null, 2), 'utf8', (err) => {\n        if (err) {\n          console.error('Error writing file:', err);\n          return;\n        }\n  \n        console.log('Annotations saved to file.');\n      });\n    });\n  }\n\n  return (\n    <div>\n      <div>\n        <button\n          onClick={toggleTool}>\n            { tool === 'rect' ? 'RECTANGLE' : 'POLYGON' }\n        </button>\n        <button\n          onClick={showAnno}>\n            Show Annotations\n        </button>\n        <button onClick={image1}>image1</button>\n        <button onClick={image2}>image2</button>\n        <button onClick={image3}>image3</button>\n        <button onClick={saveAnnotationsToFile}>Save Annotations</button>\n\n      </div>\n\n      <p>{strannos}</p>\n\n      <img \n        id=\"img\"\n        ref={imgE} \n        src={power} \n        alt=\"power\" />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}